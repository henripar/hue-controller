[{"/Users/henriparviainen/sites/ElectronLight/lol/src/index.js":"1","/Users/henriparviainen/sites/ElectronLight/lol/src/App.js":"2","/Users/henriparviainen/sites/ElectronLight/lol/src/serviceWorker.js":"3","/Users/henriparviainen/sites/ElectronLight/lol/src/color-converter.js":"4"},{"size":503,"mtime":1601714663624,"results":"5","hashOfConfig":"6"},{"size":9611,"mtime":1611298882129,"results":"7","hashOfConfig":"6"},{"size":5086,"mtime":1601714663625,"results":"8","hashOfConfig":"6"},{"size":4586,"mtime":1611203339271,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"pikltl",{"filePath":"13","messages":"14","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"/Users/henriparviainen/sites/ElectronLight/lol/src/index.js",[],["22","23"],"/Users/henriparviainen/sites/ElectronLight/lol/src/App.js",["24","25","26","27","28","29","30","31","32","33","34","35"],"import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport stripe from './assets/LedStripev1.png';\nimport bulb from './assets/Lightbulb1.png';\nimport bulb2 from './assets/LightBulb2.png';\nimport stripe2 from './assets/LightStripv2.png';\nimport { CirclePicker } from 'react-color';\nimport * as ColorConverter from './color-converter';\nimport Slider, { Range } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\n\nconst Image = (props) => {\n  console.log(props);\n  const [image, setImage] = useState(props.type1 === 'LCL001' ? stripe2 : bulb);\n  useEffect(() => {\n    if (props.type1 == 'LCL001' && props.imageState === false) {\n      setImage(stripe2);\n    } else if (props.type1 == 'LWA001' && props.imageState === false) {\n      setImage(bulb);\n    } else if (props.type1 == 'LWA001' && props.imageState === true) {\n      setImage(bulb2);\n    } else if (props.type1 == 'LCL001' && props.imageState === true) {\n      setImage(stripe);\n    }\n  }, [props.imageState]);\n  return <img className='light-image' src={image} />;\n};\nconst Light = (props) => {\n  const [image, setImage] = useState('');\n  const [lightDetails, setLightDetails] = useState(100);\n\n  useEffect(() => {\n    axios\n    .get(\n      `${process.env.REACT_APP_BRIDGE_URL}/lights/${props.number}`\n    )\n    .then((result) => {\n      setLightDetails(result.data.state.bri);\n      console.log(result.data.state, '!!!!');\n      if(result.data.state.on === true) {\n        setImage(true);\n      }\n    });\n  }, [])\n  const turnLightOn = (number) => {\n    axios\n      .put(\n        `${process.env.REACT_APP_BRIDGE_URL}/lights/${props.number}/state`,\n        { on: true }\n      )\n      .then((result) => {\n        console.log(result.data);\n        setImage(true);\n      });\n  };\n  const turnLightOff = () => {\n    axios\n      .put(\n        `${process.env.REACT_APP_BRIDGE_URL}/lights/${props.number}/state`,\n        { on: false }\n      )\n      .then((result) => {\n        console.log(result.data);\n        setImage(false);\n      });\n  };\n\n  const changeColor = (color, event)=> {\n    console.log(color)\n    const newcolor = ColorConverter.rgb_to_cie(color.rgb.r, color.rgb.g, color.rgb.b);\n    console.log(newcolor)\n    const x = newcolor[0].toString();\n    const y = newcolor[1].toString();\n    axios\n    .put(\n      `${process.env.REACT_APP_BRIDGE_URL}/lights/${props.number}/state`,\n      { xy: [Number(x.slice(0, 4)), Number(y.slice(0,4)) ] }\n    )\n    .then((result) => {\n      console.log(result.data);\n    });\n};\n\n  const changeSliderValue = (e) => {\n    console.log(e)\n    setLightDetails(e)\n    axios\n    .put(\n      `${process.env.REACT_APP_BRIDGE_URL}/${props.number}/state`,\n      { bri: e }\n    )\n    .then((result) => {\n      console.log(result.data);\n    });\n  }\n\n\n  return (\n    <div>\n      <Image\n        type1={props.modelid}\n        state={props.state}\n        imageState={image}\n      ></Image>\n      <h2>{props.name}</h2>\n      <button onClick={turnLightOn} type='button'>\n        {' '}\n        ON{' '}\n      </button>\n      <button onClick={turnLightOff} type='button'>\n        {' '}\n        OFF{' '}\n      </button>\n      <div className=\"tweaker\">\n        {props.modelid == 'LCL001'? \n        <div>\n          <p>Brightness</p>\n        <Slider min={1} max={\"245\"} lightDetails={lightDetails} onChange={changeSliderValue} defaultValue={lightDetails} value={lightDetails} railStyle={{width: '200px'}} trackStyle={{backgroundColor: 'rgba(253, 212, 2, .7)', width: '150px'}} handleStyle={{border: 'transparent 2px solid'}}></Slider>\n        <p>Color</p>\n        <CirclePicker onChangeComplete={changeColor}></CirclePicker>\n        </div> : ( props.modelid == 'LWA001' ? \n        <div>\n        <p>Brightness</p>\n        <Slider min={1} max={\"245\"} onChange={changeSliderValue} defaultValue={lightDetails} value={lightDetails} railStyle={{width: '200px'}} trackStyle={{backgroundColor: 'rgba(253, 212, 2, .7)', width: '150px'}} handleStyle={{border: 'transparent 2px solid'}}></Slider>\n        </div>: null)\n        }\n      </div>\n    </div>\n  );\n};\n\nfunction App() {\n  const [lights, setLights] = useState([]);\n  const [activeLight, setActiveLight]= useState('');\n  useEffect(() => {\n    axios\n      .get(\n        `${process.env.REACT_APP_BRIDGE_URL}/lights`\n      )\n      .then((result) => {\n        console.log(result.data);\n        var array = Object.keys(result.data).map((key) => [\n          Number(key),\n          result.data[key]\n        ]);\n        setLights(array);\n        console.log(array);\n      });\n  }, []);\n\n  const changeLight = (e) => {\n    const untrimmed = e.target.getAttribute('data-value')\n    console.log(untrimmed)\n    setActiveLight(untrimmed)\n  }\n\n  return (\n    <div className='App'>\n      <div className='main-container'>\n      <div className=\"menu-container\">\n        <h4 className=\"menu-header\">Your Lights</h4>\n      {lights.map((e)=> {\n        return (\n          <div className=\"menu-item\" data-value={e[1].name} onClick={changeLight}>\n            {e[1].modelid == 'LCL001' ?           <svg width=\"32px\" height=\"32px\" viewBox=\"0 0 32 32\" version=\"1.1\">\n    <g stroke=\"gray\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g fill=\"#1c1e24\">\n            <path d=\"M8.4395,16.668 C8.9795,16.552 9.5115,16.895 9.6285,17.435 C9.7455,17.974 9.4025,18.506 8.8625,18.623 C8.3225,18.74 7.7905,18.397 7.6735,17.857 C7.5565,17.317 7.9005,16.785 8.4395,16.668 M13.3275,15.611 C13.8665,15.495 14.3985,15.838 14.5155,16.377 C14.6325,16.917 14.2895,17.449 13.7505,17.566 C13.2105,17.683 12.6775,17.34 12.5605,16.8 C12.4445,16.261 12.7875,15.729 13.3275,15.611 M18.2135,14.555 C18.7535,14.438 19.2865,14.781 19.4025,15.32 C19.5195,15.86 19.1765,16.393 18.6365,16.51 C18.0965,16.626 17.5645,16.283 17.4485,15.743 C17.3315,15.203 17.6735,14.671 18.2135,14.555 M23.1005,13.498 C23.6405,13.381 24.1725,13.724 24.2905,14.264 C24.4065,14.804 24.0635,15.336 23.5235,15.453 C22.9835,15.569 22.4515,15.227 22.3355,14.687 C22.2175,14.147 22.5615,13.614 23.1005,13.498 M10.6695,20.639 L25.4735,17.444 C26.5535,17.211 27.2405,16.147 27.0065,15.067 C26.4495,12.484 23.9035,10.842 21.3205,11.399 L6.5165,14.594 C5.4365,14.827 4.7505,15.891 4.9835,16.971 C5.5415,19.554 8.0865,21.196 10.6695,20.639 M25,26 C24.447,26 24,25.553 24,25 C24,24.447 24.447,24 25,24 C25.553,24 26,24.447 26,25 C26,25.553 25.553,26 25,26 M20,26 C19.447,26 19,25.553 19,25 C19,24.447 19.447,24 20,24 C20.553,24 21,24.447 21,25 C21,25.553 20.553,26 20,26 M15,26 C14.447,26 14,25.553 14,25 C14,24.447 14.447,24 15,24 C15.553,24 16,24.447 16,25 C16,25.553 15.553,26 15,26 M10,26 C9.447,26 9,25.553 9,25 C9,24.447 9.447,24 10,24 C10.553,24 11,24.447 11,25 C11,25.553 10.553,26 10,26 M27,22 L9,22 C5,22 4,19 4,18 L4,23 C4,25.762 6.238,28 9,28 L27,28 C27.553,28 28,27.553 28,27 L28,23 C28,22.447 27.553,22 27,22 M22,8 C21.447,8 21,7.553 21,7 C21,6.447 21.447,6 22,6 C22.553,6 23,6.447 23,7 C23,7.553 22.553,8 22,8 M17,8 C16.447,8 16,7.553 16,7 C16,6.447 16.447,6 17,6 C17.553,6 18,6.447 18,7 C18,7.553 17.553,8 17,8 M12,8 C11.447,8 11,7.553 11,7 C11,6.447 11.447,6 12,6 C12.553,6 13,6.447 13,7 C13,7.553 12.553,8 12,8 M7,8 C6.447,8 6,7.553 6,7 C6,6.447 6.447,6 7,6 C7.553,6 8,6.447 8,7 C8,7.553 7.553,8 7,8 M23,4 L5,4 C4.447,4 4,4.447 4,5 L4,9 C4,9.553 4.447,10 5,10 L23,10 C27,10 28,13 28,14 L28,9 C28,6.238 25.762,4 23,4\"></path>\n        </g>\n    </g>\n</svg>\n: <svg  width=\"32px\" height=\"32px\" viewBox=\"0 0 32 32\" version=\"1.1\">\n<g stroke=\"gray\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n    <g fill=\"#1c1e24\">\n        <path d=\"M9.5732,13.208 C11.4602,13.805 14.2122,14 16.0002,14 C17.7882,14 20.5402,13.805 22.4272,13.208 C21.6592,15.226 20.3272,16.119 20.0102,18 C19.8722,18.819 19.7552,19.963 19.8332,20.801 C19.8822,21.334 19.4762,21.802 18.9432,21.856 C18.0792,21.945 17.0972,22 16.0002,22 C14.9022,22 13.9212,21.945 13.0562,21.856 C12.5232,21.802 12.1182,21.334 12.1672,20.801 C12.2452,19.963 12.1282,18.819 11.9902,18 C11.6732,16.119 10.3412,15.226 9.5732,13.208 Z M13,22.8623 C14.041,22.9633 15.187,23.0003 16,23.0003 C16.813,23.0003 17.959,22.9633 19,22.8623 L18.499,25.9703 C18.473,26.1883 18.367,26.3903 18.199,26.5433 L17.732,26.9673 C17.701,26.9963 17.672,27.0273 17.645,27.0593 L17.151,27.6423 C16.961,27.8683 16.672,28.0003 16.365,28.0003 L16,28.0003 L15.635,28.0003 C15.328,28.0003 15.039,27.8683 14.849,27.6423 L14.355,27.0593 C14.328,27.0273 14.299,26.9963 14.268,26.9673 L13.801,26.5433 C13.633,26.3903 13.527,26.1883 13.501,25.9703 L13,22.8623 Z M16,4 C19.853,4 23,7.332 23,10.5 C23,10.789 22.945,11.043 22.915,11.305 C22.884,11.561 22.841,11.775 22.788,12.012 C21.698,12.472 19.384,13 16,13 C12.616,13 10.302,12.472 9.212,12.012 C9.159,11.775 9.116,11.561 9.085,11.305 C9.055,11.043 9,10.789 9,10.5 C9,7.332 12.147,4 16,4 Z\"></path>\n    </g>\n</g>\n</svg> }\n  \n            {e[1].name}\n            </div>\n        )\n      })}\n      </div>\n      <div className=\"light-info-container\">\n\n        \n        {\n        lights.map((e) => {\n          if(e[1].name === activeLight)\n          return (\n            <Light\n              key={e[1].uniqueid}\n              number={e[0]}\n              name={e[1].name}\n              modelid={e[1].modelid}\n              state={e[1].state.on}\n            ></Light>\n          );\n        })}\n            {!activeLight ? \n           (\n            <div>\n              <h1>   Welcome to</h1>\n              <h1> Philips Hue </h1>\n              <h1>Light controller App!</h1>\n                <h3>Choose a light from left panel to get started.</h3>\n              </div>\n          ): null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/henriparviainen/sites/ElectronLight/lol/src/serviceWorker.js",[],"/Users/henriparviainen/sites/ElectronLight/lol/src/color-converter.js",["36","37","38"],"/*\nWith these functions you can convert the CIE color space to the RGB color space and vice versa.\nThe developer documentation for Philips Hue provides the formulas used in the code below:\nhttps://developers.meethue.com/documentation/color-conversions-rgb-xy\nI've used the formulas and Objective-C example code and transfered it to JavaScript.\nExamples:\nvar rgb = cie_to_rgb(0.6611, 0.2936)\nvar cie = rgb_to_cie(255, 39, 60)\n------------------------------------------------------------------------------------\nThe MIT License (MIT)\nCopyright (c) 2017 www.usolved.net\nPublished under https://github.com/usolved/cie-rgb-converter\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n\n\n\n/**\n * Converts CIE color space to RGB color space\n * @param {Number} x\n * @param {Number} y\n * @param {Number} brightness - Ranges from 1 to 254\n * @return {Array} Array that contains the color values for red, green and blue\n */\nexport function cie_to_rgb(x, y, brightness)\n{\n\t//Set to maximum brightness if no custom value was given (Not the slick ECMAScript 6 way for compatibility reasons)\n\tif (brightness === undefined) {\n\t\tbrightness = 254;\n\t}\n\n\tvar z = 1.0 - x - y;\n\tvar Y = (brightness / 254).toFixed(2);\n\tvar X = (Y / y) * x;\n\tvar Z = (Y / y) * z;\n\n\t//Convert to RGB using Wide RGB D65 conversion\n\tvar red \t=  X * 1.656492 - Y * 0.354851 - Z * 0.255038;\n\tvar green \t= -X * 0.707196 + Y * 1.655397 + Z * 0.036152;\n\tvar blue \t=  X * 0.051713 - Y * 0.121364 + Z * 1.011530;\n\n\t//If red, green or blue is larger than 1.0 set it back to the maximum of 1.0\n\tif (red > blue && red > green && red > 1.0) {\n\n\t\tgreen = green / red;\n\t\tblue = blue / red;\n\t\tred = 1.0;\n\t}\n\telse if (green > blue && green > red && green > 1.0) {\n\n\t\tred = red / green;\n\t\tblue = blue / green;\n\t\tgreen = 1.0;\n\t}\n\telse if (blue > red && blue > green && blue > 1.0) {\n\n\t\tred = red / blue;\n\t\tgreen = green / blue;\n\t\tblue = 1.0;\n\t}\n\n\t//Reverse gamma correction\n\tred \t= red <= 0.0031308 ? 12.92 * red : (1.0 + 0.055) * Math.pow(red, (1.0 / 2.4)) - 0.055;\n\tgreen \t= green <= 0.0031308 ? 12.92 * green : (1.0 + 0.055) * Math.pow(green, (1.0 / 2.4)) - 0.055;\n\tblue \t= blue <= 0.0031308 ? 12.92 * blue : (1.0 + 0.055) * Math.pow(blue, (1.0 / 2.4)) - 0.055;\n\n\n\t//Convert normalized decimal to decimal\n\tred \t= Math.round(red * 255);\n\tgreen \t= Math.round(green * 255);\n\tblue \t= Math.round(blue * 255);\n\n\tif (isNaN(red))\n\t\tred = 0;\n\n\tif (isNaN(green))\n\t\tgreen = 0;\n\n\tif (isNaN(blue))\n\t\tblue = 0;\n\n\n\treturn [red, green, blue];\n}\n\n\n/**\n * Converts RGB color space to CIE color space\n * @param {Number} red\n * @param {Number} green\n * @param {Number} blue\n * @return {Array} Array that contains the CIE color values for x and y\n */\nexport function rgb_to_cie(red, green, blue)\n{\n\t//Apply a gamma correction to the RGB values, which makes the color more vivid and more the like the color displayed on the screen of your device\n\tvar red \t= (red > 0.04045) ? Math.pow((red + 0.055) / (1.0 + 0.055), 2.4) : (red / 12.92);\n\tvar green \t= (green > 0.04045) ? Math.pow((green + 0.055) / (1.0 + 0.055), 2.4) : (green / 12.92);\n\tvar blue \t= (blue > 0.04045) ? Math.pow((blue + 0.055) / (1.0 + 0.055), 2.4) : (blue / 12.92); \n\n\t//RGB values to XYZ using the Wide RGB D65 conversion formula\n\tvar X \t\t= red * 0.664511 + green * 0.154324 + blue * 0.162028;\n\tvar Y \t\t= red * 0.283881 + green * 0.668433 + blue * 0.047685;\n\tvar Z \t\t= red * 0.000088 + green * 0.072310 + blue * 0.986039;\n\n\t//Calculate the xy values from the XYZ values\n\tvar x \t\t= (X / (X + Y + Z)).toFixed(4);\n\tvar y \t\t= (Y / (X + Y + Z)).toFixed(4);\n\n\tif (isNaN(x))\n\t\tx = 0;\n\n\tif (isNaN(y))\n\t\ty = 0;\t \n\n\n\treturn [x, y];\n}",["39","40"],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":10,"column":18,"nodeType":"47","messageId":"48","endLine":10,"endColumn":23},{"ruleId":"49","severity":1,"message":"50","line":18,"column":21,"nodeType":"51","messageId":"52","endLine":18,"endColumn":23},{"ruleId":"49","severity":1,"message":"50","line":20,"column":28,"nodeType":"51","messageId":"52","endLine":20,"endColumn":30},{"ruleId":"49","severity":1,"message":"50","line":22,"column":28,"nodeType":"51","messageId":"52","endLine":22,"endColumn":30},{"ruleId":"49","severity":1,"message":"50","line":24,"column":28,"nodeType":"51","messageId":"52","endLine":24,"endColumn":30},{"ruleId":"53","severity":1,"message":"54","line":27,"column":6,"nodeType":"55","endLine":27,"endColumn":24,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":28,"column":10,"nodeType":"59","endLine":28,"endColumn":53},{"ruleId":"53","severity":1,"message":"60","line":46,"column":6,"nodeType":"55","endLine":46,"endColumn":8,"suggestions":"61"},{"ruleId":"49","severity":1,"message":"50","line":117,"column":24,"nodeType":"51","messageId":"52","endLine":117,"endColumn":26},{"ruleId":"49","severity":1,"message":"50","line":123,"column":34,"nodeType":"51","messageId":"52","endLine":123,"endColumn":36},{"ruleId":"49","severity":1,"message":"50","line":167,"column":27,"nodeType":"51","messageId":"52","endLine":167,"endColumn":29},{"ruleId":"62","severity":1,"message":"63","line":191,"column":24,"nodeType":"64","messageId":"65","endLine":191,"endColumn":26},{"ruleId":"66","severity":1,"message":"67","line":112,"column":6,"nodeType":"47","messageId":"68","endLine":112,"endColumn":9},{"ruleId":"66","severity":1,"message":"69","line":113,"column":6,"nodeType":"47","messageId":"68","endLine":113,"endColumn":11},{"ruleId":"66","severity":1,"message":"70","line":114,"column":6,"nodeType":"47","messageId":"68","endLine":114,"endColumn":10},{"ruleId":"41","replacedBy":"71"},{"ruleId":"43","replacedBy":"72"},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'Range' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.type1'. Either include it or remove the dependency array.","ArrayExpression",["75"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'props.number'. Either include it or remove the dependency array.",["76"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-redeclare","'red' is already defined.","redeclared","'green' is already defined.","'blue' is already defined.",["73"],["74"],"no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},"Update the dependencies array to be: [props.imageState, props.type1]",{"range":"81","text":"82"},"Update the dependencies array to be: [props.number]",{"range":"83","text":"84"},[997,1015],"[props.imageState, props.type1]",[1518,1520],"[props.number]"]